#include "usart.h"
#include "main.h"
#include "SysTick.h"


Buff speed_set_buff;

int fputc(int ch,FILE *p)  //函数默认的，在使用printf函数时自动调用
{
    USART_SendData(USART1,(u8)ch);
    while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);
    return ch;
}

/*******************************************************************************
* 函 数 名         : USART1_Init
* 函数功能		   : USART1初始化函数
* 输    入         : bound:波特率
* 输    出         : 无
*******************************************************************************/
void USART1_Init(u32 bound)
{
    //GPIO端口设置
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);


    /*  配置GPIO的模式和IO口 */
    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9;//TX			   //串口输出PA9
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;	    //复用推挽输出
    GPIO_Init(GPIOA,&GPIO_InitStructure);  /* 初始化串口输入IO */
    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;//RX			 //串口输入PA10
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;		  //模拟输入
    GPIO_Init(GPIOA,&GPIO_InitStructure); /* 初始化GPIO */


    //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = bound;//波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
    USART_Init(USART1, &USART_InitStructure); //初始化串口1

    USART_Cmd(USART1, ENABLE);  //使能串口1

    USART_ClearFlag(USART1, USART_FLAG_TC);

    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断

    //Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
    NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、
}
/*******************************************************************************
* 函 数 名         : USART2_Init
* 函数功能		   : USART2初始化函数
* 输    入         : bound:波特率
* 输    出         : 无
*******************************************************************************/
void USART2_Init(u32 bound)
{
    //GPIO端口设置
    GPIO_InitTypeDef  GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef  NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);

    /*  配置GPIO的模式和IO口 */
    GPIO_InitStructure.GPIO_Pin  =GPIO_Pin_2;//TX			   //串口输出PA2
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;	    //复用推挽输出
    GPIO_Init(GPIOA,&GPIO_InitStructure);  /* 初始化串口输入IO */
    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_3;//RX			 //串口输入PA3
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;		  //模拟输入
    GPIO_Init(GPIOA,&GPIO_InitStructure); /* 初始化GPIO */


    //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = bound;//波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
    USART_Init(USART2, &USART_InitStructure); //初始化串口1

    USART_Cmd(USART2, ENABLE);  //使能串口2

    USART_ClearFlag(USART2, USART_FLAG_TC);

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//开启相关中断

    //Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;//串口2中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
    NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
}

/*******************************************************************************
* 函 数 名         : USART1_IRQHandler
* 函数功能		   : USART1中断函数
* 输    入         : 无
* 输    出         : 无
*******************************************************************************/
void USART1_IRQHandler(void)                	//串口1中断服务程序
{
    static uint8_t usart_rx = 0, usart1_buff[7] = {0};
    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断
    {
        USART_ClearITPendingBit(USART1,USART_IT_RXNE);//清楚中断标志
        usart1_buff[usart_rx] =USART_ReceiveData(USART1);//(USART1->DR);	//读取接收到的数据

        USART_SendData(USART1,0XBB);
        delay_ms(1);
        USART_SendData(USART1,usart1_buff[usart_rx]);
        delay_ms(1);
        usart_rx++;
        if(usart1_buff[0]==0xaa)
        {
            USART_SendData(USART1,0XCC);
            delay_ms(1);
            if(usart1_buff[Buff_Len-1]==0x55||usart_rx==Buff_Len)
            {
							            USART_SendData(USART1,0XCC);
            delay_ms(1);
                speed_set_buff.left_high	=usart1_buff[1];
                speed_set_buff.left_low  	=usart1_buff[2];
                speed_set_buff.right_high =usart1_buff[3];
                speed_set_buff.right_low  =usart1_buff[4];
                speed_set_buff.sign =usart1_buff[5];
                usart_rx=0;
                usart1_buff[0]=0;
            }
        }
        else usart_rx=0;
    }


//    static uint8_t m = 0,rebuf_3[7] = {0};
//    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
//    {
//			USART_ClearITPendingBit(USART1,USART_IT_RXNE);//清楚中断标志
//        rebuf_3[m] = USART_ReceiveData(USART1);
//				USART_SendData(USART1,0XAA);
//				delay_ms(15);
//				USART_SendData(USART1,rebuf_3[m]);
//			  delay_ms(15);
//        m++;
//        if (rebuf_3[0]!= 0xAA)
//        {
//            m = 0;
//            rebuf_3[0] = 0;
//        }
//        if (rebuf_3[m-1]==0x55)
//        {
//        }
//        else {
//            if(m==7)
//            {
//                speed_set_buff.left_high	=rebuf_3[1];
//                speed_set_buff.left_low  	=rebuf_3[2];
//                speed_set_buff.right_high =rebuf_3[3];
//                speed_set_buff.right_low  =rebuf_3[4];

//                m = 0;
//                rebuf_3[0]=0;
//                USART_SendData(USART1,0XAA);
//                USART_SendData(USART1,rebuf_3[2]);
//            }
//        }
//    }
}
